oms: 1
info:
  version: 1.0.0
  title: Pagerduty
  description: 'This is to create, update and resolve incidents on PagerDuty'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  contact:
    name: Open Microservices
    url: 'https://openmicroservices.org'
    email: core@openmicroservices.org
lifecycle:
  startup:
    command:
      - pagerduty
actions:
  createIncident:
    help: >-
      Create an incident, on success return the creted incident detail, on fail
      return reason and status code.
    arguments:
      from:
        type: string
        in: query
        required: true
        help: >-
          The email address of a valid user associated with the account making
          the request
      incident:
        type: object
        in: requestBody
        required: true
        help: Incident detail for creation.
    http:
      port: 5000
      method: post
      path: /incidents
      contentType: application/json
    output:
      type: object
      properties:
        type:
          help: 'type of the pagerduty , eg.incident'
          type: string
        summary:
          help: title of incident
          type: string
        incident_number:
          help: created new incident nubmber.
          type: number
        assignments:
          help: 'detail of incident assignee, showing list of assignee.'
          type: list
        service:
          help: 'service detail with type, summary, name, description'
          type: object
        status:
          help: status of the created incident.
          type: string
        priority:
          help: priority of the incident.
          type: object
  getIncident:
    help: Show detailed information about an incident.
    arguments:
      id:
        type: string
        in: path
        required: true
        help: Incident id to get incident detail.
    http:
      port: 5000
      method: get
      path: '/incidents/{{id}}'
      contentType: application/json
    output:
      type: object
      properties:
        type:
          help: 'type of the pagerduty , eg.incident'
          type: string
        summary:
          help: title of incident
          type: string
        incident_number:
          help: created new incident nubmber.
          type: number
        assignments:
          help: 'detail of incident assignee, showing list of assignee.'
          type: list
        service:
          help: 'service detail with type, summary, name, description'
          type: object
        status:
          help: status of the created incident.
          type: string
        priority:
          help: priority of the incident.
          type: object
  listIncidents:
    help: List existing incidents.
    arguments:
      timezone:
        type: string
        in: query
        help: The timezone code
      since:
        type: string
        in: query
        help: The start of the date
      until:
        type: string
        in: query
        help: The end of the date
      date_range:
        type: string
        in: query
        help: start and end date range
      incident_key:
        type: string
        in: query
        help: search with incident key
      statuses:
        type: list
        in: query
        help: Return only incidents with the given statuses
      serviceIds:
        type: list
        in: query
        help: Returns only the incidents associated with the passed service
      userIds:
        type: list
        in: query
        help: Returns only the incidents currently assigned to the passed user
    http:
      port: 5000
      method: get
      path: /listincidents
      contentType: application/json
    output:
      type: map
      properties:
        incidents:
          help: >-
            show the list of incident object includes with type, summary,
            incident_number, assignments, service, status, priority
          type: list
  getIncidentNotes:
    help: List existing incident notes.
    arguments:
      id:
        type: string
        in: path
        required: true
        help: Id of the incident.
    http:
      port: 5000
      method: get
      path: '/incidents/{{id}}/notes'
      contentType: application/json
    output:
      type: map
      properties:
        incident_number:
          help: incident number of related incident note.
          type: number
        title:
          help: title of the incident note.
          type: string
        status:
          help: status of the incident note.
          type: string
        id:
          help: incident note id
          type: string
        service:
          help: 'service detail with type, summary, name, description'
          type: object
  listServices:
    help: Get list existing services.
    arguments:
      serviceOptions:
        type: object
        in: requestBody
        required: true
        help: service options for filter service as per option.
    http:
      port: 5000
      method: post
      path: /services
      contentType: application/json
    output:
      type: map
      properties:
        limit:
          help: limit count of the retrive records.
          type: number
        offset:
          help: offset of the records for getting next records.
          type: number
        services:
          help: >-
            list of services object includes service id, type, service, name,
            description, teams, status
          type: list
  getService:
    help: Get details about an existing service.
    arguments:
      id:
        type: string
        in: path
        required: true
        help: Id of the service
      serviceOptions:
        type: object
        in: requestBody
        required: true
        help: service options for filter service as per option.
    http:
      port: 5000
      method: post
      path: '/services/{{id}}'
      contentType: application/json
    output:
      type: object
      properties:
        type:
          help: type of the pagerduty resource eg. service
          type: string
        name:
          help: name of the service.
          type: string
        description:
          help: description of the service
          type: string
        teams:
          help: 'list of the teams for service with team id, type, summary.'
          type: list
        status:
          help: status of the service eg. critical
          type: string
environment:
  ACCESS_TOKEN:
    type: string
    pattern: '[a-zA-Z0-9_-]*$'
    required: true
    help: basic athorization token.
